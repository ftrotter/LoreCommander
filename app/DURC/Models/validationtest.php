<?php

namespace App\DURC\Models;

use ftrotter\DURC\DURCModel;
use ftrotter\DURC\DURC;
/*
	Note this class was auto-generated from 

DURC_aaa.validationTest by DURC.

	This class will be overwritten during future auto-generation runs..
	Itjust reflects whatever is in the database..
	DO NOT EDIT THIS FILE BY HAND!!
	Your changes go in validationtest.php 

*/

class validationtest extends DURCModel{

    

    
        // the datbase for this model
        protected $table = 'DURC_aaa.validationTest';

	//DURC will dymanically copy these into the $with variable... which prevents recursion problem: https://laracasts.com/discuss/channels/eloquent/eager-load-deep-recursion-problem?page=1
		protected $DURC_selfish_with = [ 
		];


	//DURC did not detect any date fields

	public $timestamps = true;
	const UPDATED_AT = 'updated_at';
	const CREATED_AT = 'created_at';
	
	

	//for many functions to work, we need to be able to do a lookup on the field_type and get back the MariaDB/MySQL column type.
	static $field_type_map = [
		'id' => 'int',
		'is_tinyIntTrueFalse' => 'tinyint',
		'has_tinyIntTrueFalse' => 'tinyint',
		'thisDecimal' => 'decimal',
		'thisFloat' => 'float',
		'thisDouble' => 'double',
		'this_url' => 'varchar',
		'this_uuid' => 'varchar',
		'this_alpha' => 'varchar',
		'this_alpha_dash' => 'varchar',
		'this_alpha_num' => 'varchar',
		'this_email' => 'varchar',
		'this_ipv4' => 'varchar',
		'this_ipv6' => 'varchar',
		'this_json' => 'varchar',
		'this_timezone' => 'varchar',
		'created_at' => 'datetime',
		'updated_at' => 'datetime',
	]; //end field_type_map
		
    // Indicate which fields are nullable for the UI to be able to validate required/present form elements
    protected $non_nullable_fields = [
		'id',
		'is_tinyIntTrueFalse',
		'has_tinyIntTrueFalse',
		'thisDecimal',
		'thisFloat',
		'thisDouble',
		'this_url',
		'this_uuid',
		'this_alpha',
		'this_alpha_dash',
		'this_alpha_num',
		'this_email',
		'this_ipv4',
		'this_ipv6',
		'this_json',
		'this_timezone',
		'created_at',
		'updated_at',
	]; // End of nullable fields

    // Use default_values array to specify the default values for each field (if any) indicated by the DB schema, to be used as placeholder on form elements
    protected $default_values = [
		'id' => null,
		'is_tinyIntTrueFalse' => null,
		'has_tinyIntTrueFalse' => null,
		'thisDecimal' => null,
		'thisFloat' => null,
		'thisDouble' => null,
		'this_url' => null,
		'this_uuid' => null,
		'this_alpha' => null,
		'this_alpha_dash' => null,
		'this_alpha_num' => null,
		'this_email' => null,
		'this_ipv4' => null,
		'this_ipv6' => null,
		'this_json' => null,
		'this_timezone' => null,
		'created_at' => 'current_timestamp()',
		'updated_at' => 'current_timestamp()',
	];  // End of attributes
        
    //everything is fillable by default
    protected $guarded = [];
		
    // These are validation rules used by the DURCModel parent to validate data before storage
    protected static $rules = [
		'id' => 'integer',
		'is_tinyIntTrueFalse' => 'present',
		'has_tinyIntTrueFalse' => 'present',
		'thisDecimal' => 'present',
		'thisFloat' => 'present',
		'thisDouble' => 'present',
		'this_url' => 'present',
		'this_uuid' => 'present',
		'this_alpha' => 'present',
		'this_alpha_dash' => 'present',
		'this_alpha_num' => 'present',
		'this_email' => 'present',
		'this_ipv4' => 'present',
		'this_ipv6' => 'present',
		'this_json' => 'present',
		'this_timezone' => 'present',
	]; // End of validation rules
		
        
	// These are mutators generated for all model attributes.
	// Mutators are called implicitly when getting and setting the attribute
	public function getIdAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIdAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('id', 'int', $value, $this);
		$this->attributes['id'] = $formatted_value;
	}

	public function getIsTinyIntTrueFalseAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setIsTinyIntTrueFalseAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('is_tinyIntTrueFalse', 'tinyint', $value, $this);
		$this->attributes['is_tinyIntTrueFalse'] = $formatted_value;
	}

	public function getHasTinyIntTrueFalseAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setHasTinyIntTrueFalseAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('has_tinyIntTrueFalse', 'tinyint', $value, $this);
		$this->attributes['has_tinyIntTrueFalse'] = $formatted_value;
	}

	public function getThisDecimalAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisDecimalAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('thisDecimal', 'decimal', $value, $this);
		$this->attributes['thisDecimal'] = $formatted_value;
	}

	public function getThisFloatAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisFloatAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('thisFloat', 'float', $value, $this);
		$this->attributes['thisFloat'] = $formatted_value;
	}

	public function getThisDoubleAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisDoubleAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('thisDouble', 'double', $value, $this);
		$this->attributes['thisDouble'] = $formatted_value;
	}

	public function getThisUrlAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisUrlAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_url', 'varchar', $value, $this);
		$this->attributes['this_url'] = $formatted_value;
	}

	public function getThisUuidAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisUuidAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_uuid', 'varchar', $value, $this);
		$this->attributes['this_uuid'] = $formatted_value;
	}

	public function getThisAlphaAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisAlphaAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_alpha', 'varchar', $value, $this);
		$this->attributes['this_alpha'] = $formatted_value;
	}

	public function getThisAlphaDashAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisAlphaDashAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_alpha_dash', 'varchar', $value, $this);
		$this->attributes['this_alpha_dash'] = $formatted_value;
	}

	public function getThisAlphaNumAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisAlphaNumAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_alpha_num', 'varchar', $value, $this);
		$this->attributes['this_alpha_num'] = $formatted_value;
	}

	public function getThisEmailAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisEmailAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_email', 'varchar', $value, $this);
		$this->attributes['this_email'] = $formatted_value;
	}

	public function getThisIpv4Attribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisIpv4Attribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_ipv4', 'varchar', $value, $this);
		$this->attributes['this_ipv4'] = $formatted_value;
	}

	public function getThisIpv6Attribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisIpv6Attribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_ipv6', 'varchar', $value, $this);
		$this->attributes['this_ipv6'] = $formatted_value;
	}

	public function getThisJsonAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisJsonAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_json', 'varchar', $value, $this);
		$this->attributes['this_json'] = $formatted_value;
	}

	public function getThisTimezoneAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setThisTimezoneAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('this_timezone', 'varchar', $value, $this);
		$this->attributes['this_timezone'] = $formatted_value;
	}

	public function getCreatedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setCreatedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('created_at', 'datetime', $value, $this);
		$this->attributes['created_at'] = $formatted_value;
	}

	public function getUpdatedAtAttribute($value)
	{
		$formatted_value = $value;
		return $formatted_value;
	}

	public function setUpdatedAtAttribute($value)
	{
		$formatted_value = DURC::formatForStorage('updated_at', 'datetime', $value, $this);
		$this->attributes['updated_at'] = $formatted_value;
	}

 
        
		
//DURC HAS_MANY SECTION

			//DURC did not detect any has_many relationships
		
		
//DURC HAS_ONE SECTION

			//DURC did not detect any has_one relationships

		
//DURC BELONGS_TO SECTION

			//DURC did not detect any belongs_to relationships

//Originating SQL Schema
/*
CREATE TABLE `DURC_aaa`.`validationTest` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `is_tinyIntTrueFalse` tinyint(1) NOT NULL,
  `has_tinyIntTrueFalse` tinyint(1) NOT NULL,
  `thisDecimal` decimal(10,3) NOT NULL,
  `thisFloat` float NOT NULL,
  `thisDouble` double NOT NULL,
  `this_url` varchar(255) NOT NULL,
  `this_uuid` varchar(255) NOT NULL,
  `this_alpha` varchar(255) NOT NULL,
  `this_alpha_dash` varchar(255) NOT NULL,
  `this_alpha_num` varchar(255) NOT NULL,
  `this_email` varchar(255) NOT NULL,
  `this_ipv4` varchar(255) NOT NULL,
  `this_ipv6` varchar(255) NOT NULL,
  `this_json` varchar(1000) NOT NULL,
  `this_timezone` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `updated_at` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4
*/


}//end of validationtest