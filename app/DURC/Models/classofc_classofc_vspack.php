<?php

namespace App\DURC\Models;

use ftrotter\DURC\DURCModel;
use ftrotter\DURC\DURC;
//use Owen It\Auditing\Contracts\Auditable;
/*
	Note this class was auto-generated from 

lore.classofc_classofc_vspack by DURC.

	This class will be overwritten during future auto-generation runs..
	Itjust reflects whatever is in the database..
	DO NOT EDIT THIS FILE BY HAND!!
	Your changes go in classofc_classofc_vspack.php 

*/

class classofc_classofc_vspack extends DURCModel {

	 //not auditable, configured using is_auditable = 0 in config json

    

    
        // the datbase for this model
        protected $table = 'lore.classofc_classofc_vspack';

	//DURC will dymanically copy these into the $with variable... which prevents recursion problem: https://laracasts.com/discuss/channels/eloquent/eager-load-deep-recursion-problem?page=1
		protected $DURC_selfish_with = [ 
			'classofc', //from belongs to
			'second_classofc', //from belongs to
			'vspack', //from belongs to
		];


	//DURC did not detect any date fields

	public $timestamps = true;
	const UPDATED_AT = 'updated_at';
	const CREATED_AT = 'created_at';
	
	

	//for many functions to work, we need to be able to do a lookup on the field_type and get back the MariaDB/MySQL column type.
	static $field_type_map = [
		'id' => 'int',
		'classofc_id' => 'int',
		'second_classofc_id' => 'int',
		'vspack_id' => 'int',
		'is_bulk_linker' => 'tinyint',
		'link_note' => 'varchar',
		'created_at' => 'datetime',
		'updated_at' => 'datetime',
	]; //end field_type_map
		
    // Indicate which fields are nullable for the UI to be able to validate required/present form elements
    protected $non_nullable_fields = [
		'id',
		'classofc_id',
		'second_classofc_id',
		'vspack_id',
		'is_bulk_linker',
		'created_at',
		'updated_at',
	]; // End of nullable fields

    // Use default_values array to specify the default values for each field (if any) indicated by the DB schema, to be used as placeholder on form elements
    protected $default_values = [
		'id' => null,
		'classofc_id' => null,
		'second_classofc_id' => null,
		'vspack_id' => null,
		'is_bulk_linker' => '0',
		'link_note' => 'NULL',
		'created_at' => 'current_timestamp()',
		'updated_at' => 'current_timestamp()',
	];  // End of attributes
        
    //everything is fillable by default
    protected $guarded = [];
		
    // These are validation rules used by the DURCModel parent to validate data before storage
    protected static $rules = [
		'classofc_id' => 'integer|required',
		'second_classofc_id' => 'integer|required',
		'vspack_id' => 'integer|required',
		'is_bulk_linker' => 'boolean|integer',
		'link_note' => 'nullable',
	]; // End of validation rules
		        
		
//DURC HAS_MANY SECTION

			//DURC did not detect any has_many relationships
		
		
//DURC HAS_ONE SECTION

			//DURC did not detect any has_one relationships

		
//DURC BELONGS_TO SECTION

/**
*	get the single classofc for this classofc_classofc_vspack
*/
	public function classofc(){
		return $this->belongsTo('App\classofc','classofc_id','id');
	}


/**
*	get the single second_classofc for this classofc_classofc_vspack
*/
	public function second_classofc(){
		return $this->belongsTo('App\classofc','second_classofc_id','id');
	}


/**
*	get the single vspack for this classofc_classofc_vspack
*/
	public function vspack(){
		return $this->belongsTo('App\vspack','vspack_id','id');
	}



//Originating SQL Schema
/*
CREATE TABLE `lore`.`classofc_classofc_vspack` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `classofc_id` int(11) NOT NULL,
  `second_classofc_id` int(11) NOT NULL,
  `vspack_id` int(11) NOT NULL,
  `is_bulk_linker` tinyint(1) NOT NULL DEFAULT 0,
  `link_note` varchar(255) DEFAULT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `updated_at` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `classofc_id` (`classofc_id`,`second_classofc_id`,`vspack_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci
*/


}//end of classofc_classofc_vspack